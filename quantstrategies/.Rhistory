{r install-tidyverse, eval = F}
install.packages("tidyverse", repos = 'https://cran.us.r-project.org')
{r install-tidyverse, eval = F}
install.packages("tidyverse", repos = 'https://cran.us.r-project.org')
install.packages('quantstrat')
install.packages("devtools") # if not installed
install.packages("FinancialInstrument") #if not installed
install.packages("PerformanceAnalytics") #if not installed
devtools::install_github("braverock/blotter")
devtools::install_github("braverock/quantstrat")
install.packages("foreach")
devtools::install_github("braverock/quantstrat")
install.packages("~/Downloads/quantstrat-master.zip", repos = NULL)
install.packages("~/Downloads/quantstrat-master/", repos = NULL)
update.packages(ask = FALSE)
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages("TSseries")
pClose <- ggplot(data=df, aes(x=index(df), y=Close, group=1)) +
geom_line()
library(fArma)
library(quantmod)
library(xts)
library(zoo)
library(pracma)
library(fractal)
library(urca)
library(aTSA)
library(tseries)
library(ggplot2)
# funtion to calculate the hurst exponent for a given period in a data frame
periodicHurst <- function(data,period){
# get the length of the loop accounting for the period
loopLength <- length(data) - period
# initialize an empty list to store the hurst values
hurst_list <- vector(mode = "list", length = length(data))
# loop through the data and get the hurst exponent and store it in the list
for( i in 1:loopLength){
hurstList <-  hurstexp(data[i:(i+period)], display = FALSE)
hurst_list[i+period] <- hurstList$Hal
}
# loop through list for the period and add zeros to the beggining
for( i in 1:period){
hurst_list[i] <- 0
}
# return a the values as numeric
return(as.numeric(unlist(hurst_list)))
}
runHurst <- function(ticker, beginDate, endDate){
# get the symbol
ticker_data <- tryCatch(getSymbols(ticker,src="yahoo",from = beginDate, to = endDate, auto.assign = getOption('getSymbols.auto.assign',FALSE)),
error = function(e) {print("ERROR: Can't download the Data")})
# if there is no error downloading data and the ticker has all the trading days needed then run the script
if((!(ticker_data == "ERROR: Can't download the Data"))){
if(dim(ticker_data)[1] == Num_Days){
# just keep the close (on the fourth column)
ticker_close <- ticker_data[,4]
# select the period we want to keet
ticker_close <- ticker_close[index(ticker_close) >= beginDate & index(ticker_close) <= endDate]
# check for nan and backfill missing data
ticker_close[is.na(ticker_close),]
ticker_close <- na.locf(ticker_close)
colnames(ticker_close)[1] <- "Close"
# calculate hurst values at various time frames
weeklyH <- periodicHurst(ticker_close, 5)
byWeeklyH <- periodicHurst(ticker_close, 10)
triWeeklyH <- periodicHurst(ticker_close, 15)
monthlyH <- periodicHurst(ticker_close, 20)
pentaWeeklyH <- periodicHurst(ticker_close, 25)
sextaWeeklyH <- periodicHurst(ticker_close, 30)
# store the hurst values in the data frame
ticker_close$Hurst1W <- weeklyH
ticker_close$Hurst2W <- byWeeklyH
ticker_close$Hurst3W <- triWeeklyH
ticker_close$Hurst4W <- monthlyH
ticker_close$Hurst5W <- pentaWeeklyH
ticker_close$Hurst6W <- sextaWeeklyH
# return the data frame with the hurst values
return(ticker_close)
}
return(NULL)
}
return(NULL)
}
begin = "2018-11-30"
end = "2019-11-30"
# get the number of trading days
Dates_begin <- as.Date(begin)
Dates_end <- as.Date(end)
nyse <- timeDate::holidayNYSE(2000:year(Sys.Date()) +1)
NYcal <- create.calendar(name='NYSE', holidays=nyse, weekdays=c('saturday', 'sunday'))
bizdays.options$set(default.calendar='NYSE')
Num_Days <- bizdays(Dates_begin,Dates_end,NYcal)
df <- runHurst("AAPL",begin,end)
pClose <- ggplot(data=df, aes(x=index(df), y=Close, group=1)) +
geom_line()
pClose <- ggplot(data=df, aes(x=index(df), y=Close, group=1)) +
geom_line()
pClose <- ggplot(data=df, aes(x=index(df), y=Close)) +
geom_line()
pClose <- ggplot(data=df, aes(x=index(df), y=Close))
df <- runHurst("AAPL",begin,end)
begin = "2018-11-30"
end = "2019-11-30"
# get the number of trading days
Dates_begin <- as.Date(begin)
Dates_end <- as.Date(end)
nyse <- timeDate::holidayNYSE(2000:year(Sys.Date()) +1)
NYcal <- create.calendar(name='NYSE', holidays=nyse, weekdays=c('saturday', 'sunday'))
bizdays.options$set(default.calendar='NYSE')
Num_Days <- bizdays(Dates_begin,Dates_end,NYcal)
setwd("~/Documents/R/quantstrategies")
source('~/Documents/R/quantstrategies/HurstTimeFrames.R')
